---
title: "2023 Montenegrin legislative election"
format:
  html:
    theme: lumen
---

<style>
    body .main-container {
        max-width: 1920px !important;
    }
</style>



```{r setup, include=FALSE}
election_title <- "2023 Montenegrin legislative election"
the_country <- "Montenegro"


## Global options
knitr::opts_chunk$set(
    cache = F, 
    echo = F, 
    warning = F, 
    message = F, 
    cache.lazy = FALSE
)


# pacman::p_load(tidyverse, highcharter)
library(tidyverse)
library(highcharter)
library(gt)



options(scipen = 999)
# print(getwd())
here::here("")
# prCint(getwd())

```


```{r}

color_dat <- tibble(
  colors = c("#e6194B", "#f5911d", "#00008b", "#00FF00", "#524fa1", "#ff1a1a", "#f1c851", "#f04949", "#6495ed", "#2598d4", "#89cff0", "#89cff0", "#9A6324", "#fffac8", "#800000"),
  party = c("Drugo", "DCG", "DF", "URA", "DPS", "SDP", "ES!", "SD", "SNP", "UCG", "Vlada Crne Gore", "Demos", "HGI", "LP", "Prava Crna Gora"))


source("../utils.R")
```



```{r}
election_dat30 <- readRDS("../data/election_dat30.rds") %>% 
    rename(internal_id = page_id)  %>% 
  mutate(party = case_when(
    str_detect(party, "ΠΑΣΟΚ")  ~ "PASOK",
    str_detect(party, "ΝΔ")  ~ "ND",
    str_detect(party, "Συνασπισμός Ριζοσπαστικής Αριστεράς")  ~ "SYRIZA",
    str_detect(party, "ΕΛ")  ~ "EL",
    str_detect(party, "25")  ~ "MeRA25",
    T ~ party  )) %>% 
  mutate(party = case_when(
    str_detect(page_name, "Νίκος Συρμαλένιος") ~ "SYRIZA",
    # str_detect(page_name, "Stefanos Tyros") ~ "Volt",
    # str_detect(page_name, "Πατριωτική Ένωση - Πρόδρομος Εμφιετζόγλου") ~ "Patriotic Union",
    T ~ party 
  )) %>% 
  filter(!(party %in% c("GOV", "OTHER", "ΠΕ")))


election_dat7 <- readRDS("../data/election_dat7.rds") %>% 
    rename(internal_id = page_id)   %>% 
  mutate(party = case_when(
    str_detect(party, "ΠΑΣΟΚ")  ~ "PASOK",
    str_detect(party, "ΝΔ")  ~ "ND",
    str_detect(party, "Συνασπισμός Ριζοσπαστικής Αριστεράς")  ~ "SYRIZA",
    str_detect(party, "ΕΛ")  ~ "EL",
    str_detect(party, "25")  ~ "MeRA25",
    T ~ party  )) %>% 
  mutate(party = case_when(
    str_detect(page_name, "Νίκος Συρμαλένιος") ~ "SYRIZA",
    # str_detect(page_name, "Stefanos Tyros") ~ "Volt",
    # str_detect(page_name, "Πατριωτική Ένωση - Πρόδρομος Εμφιετζόγλου") ~ "Patriotic Union",
    T ~ party 
  )) %>% 
  filter(!(party %in% c("GOV", "OTHER", "ΠΕ")))

# saveRDS(election_dat30, "../data/election_dat30.rds")
# saveRDS(election_dat7, "../data/election_dat7.rds")

fin <- (as.Date(election_dat30$ds[1])-lubridate::days(1))
begin7 <- fin-lubridate::days(6)
begin30 <- fin-lubridate::days(29)


last7days_string <- paste0(create_date(begin7), " - ", paste(create_date(fin), lubridate::year(fin)))
last30days_string <- paste0(create_date(begin30), " - ", paste(create_date(fin), lubridate::year(fin)))


the_currency <- election_dat30 %>% 
  count(main_currency, sort = T) %>% 
  slice(1) %>% 
  pull(main_currency)

if(the_currency == "EUR"){
  currency_symbol <- "€"
} else {
  currency_symbol <- "CURRENCY"
}

```

::: {.panel-tabset}


### Methodology


In collaboration with [Who Targets Me](https://whotargets.me/), we monitored `r read_lines("../n_advertisers.txt")` political advertisers in `r the_country` during the `r election_title` to better understand how campaigns use different targeting methods made available by Meta. To do this, we used data from the [Meta Ad Library](https://www.facebook.com/ads/library/), using the new 'Audience' data which gives some detail on how pages target their ads. 

To better understand the election, we kept only advertisers who:

1. Advertised in the last 7 days (`r last7days_string`)
2. Advertised in the last 30 days (`r last30days_string`)

> Note: Meta only provides 7, 30 and 90 days windows for the targeting data in their Ad Library. Meta's data also lags by a few days. Report will be updated as soon as new data is available.


### Election Targeting Dashboards

A list of election dashboards:

+ `r emo::ji("netherlands")` [2021 Dutch parliamentary election](https://favstats.github.io/DutchElectionObservatory/en/index.html) (15th-17th March 2021)
+ `r emo::ji("de")` [2021 German federal election](https://favstats.shinyapps.io/btw21_wtm) (26 September 2021)
+ `r emo::ji("sweden")` [2022 Swedish general election](https://favstats.github.io/SwedishElection2022/) (11th September 2022)
+ `r emo::ji("us")` [2022 United States midterm elections](https://whotargetsme.shinyapps.io/midterms2022/) (8th November 2022)
+ `r emo::ji("us")` [2022 United States midterm elections - Georgia Runoff](https://whotargetsme.github.io/midterms2022_dashboard/) (6th December 2022)
+ `r emo::ji("it")` [2023 Lazio & Lombardy regional election](https://favstats.github.io/regionali2023/) (12-13th February 2023)
+ `r emo::ji("estonia")` [2023 Estonian parliamentary election](https://favstats.github.io/EstoniaElection2023/) (5th March 2023)
+ `r emo::ji("netherlands")` [2023 Dutch provincial elections](https://favstats.github.io/ProvincialeStatenverkiezingen2023/) (15th March 2023)
+ `r emo::ji("montenegro")` [2023 Montenegrin presidential elections](https://refined-github-html-preview.kidonng.workers.dev/favstats/MontenegroPresidentialElection2023/raw/dc4d9baafe3f30b7d79e45206f63c745f51a25b3/index.html) (19th March 2023) - 1st round
+ `r emo::ji("australia")` [2023 New South Wales state election](https://favstats.github.io/NSWAustralianElection2023/) (25th March 2023)
+ `r emo::ji("finland")` [2023 Finnish parliamentary election](https://favstats.github.io/FinlandElections2023/) (2 April 2023)
+ `r emo::ji("tr")` [2023 Turkish general election](https://refined-github-html-preview.kidonng.workers.dev/favstats/TurkishElection2023/raw/ce6281fe74b8f5a3f99c576c31bd95758cf80dec/index.html) (14 May 2023) - Round 1
+ `r emo::ji("de")` [2023 Bremen State election](https://favstats.github.io/BremenStateElection2023/) (14 May 2023)
+ `r emo::ji("greece")` [2023 Greek Legislative election](https://favstats.github.io/BremenStateElection2023/) (21 May 2023)
+ `r emo::ji("tr")` [2023 Turkish Presidential election](https://favstats.github.io/TurkishElection2023/) (14 May 2023) - Round 2
+ `r emo::ji("montenegro")` [Montenegrin parliamentary elections, 2023](https://favstats.github.io/2023MontenegrinParliamentaryElection/) (11 June 2023)




### About Us


```{r, echo=F}
library(htmltools)
library(bs4cards)


cards <- function(title, text, link, image) {
  div(class = "card",
      div(class = "card-body pb-5",
          h6(class = "card-title mb-0", title)),
      img(class = "card-img-top", src = image, style="object-fit: cover; height: 200px; width: 100%;"),
          p(class = "card-text", text),
          a(href = link, class = "btn btn-primary", "Link"))
}

div(class = "row",
    div(class = "col-sm-4 col-md-4",
        cards(
          "Fabio Votta",
          "Ph.D. candidate in Political Communication at the University of Amsterdam who studies (online) political microtargeting and its usage around the world.",
          "https://twitter.com/favstats",
          "https://www.uva.nl/binaries/_ht_1677599571673/cardmedium/content/gallery/personen/v/o/fabio-votta.jpg"
        )
    ),
    div(class = "col-sm-4 col-md-4",
        cards(
          "Who Targets Me",
          "Grassroots activist group advocating for transparency in the digital age by monitoring political adverts on social media and their impact on democracy.",
          "#",
          "https://whotargets.me/wp-content/uploads/2020/06/wtm_logo_2020.png"
        )
    )
)

```


::: 


## Topline Statistics  

::: {.panel-tabset}


```{r}

total_spend_id <- election_dat30 %>% 
    filter(main_currency == the_currency) %>% 
  distinct(internal_id, .keep_all = T) %>% 
  group_by(party) %>% 
  summarize(total_spend_formatted = sum(total_spend_formatted)) %>% 
  ungroup() 
```



```{r}
sum30 <- election_dat30 %>% 
    filter(main_currency == the_currency) %>% 
    distinct(internal_id, .keep_all = T) %>% 
    summarize(total_spend_formatted = sum(total_spend_formatted),
              total_num_ads = sum(total_num_ads))

sum7 <- election_dat7 %>% 
    filter(main_currency == the_currency) %>% 
    distinct(internal_id, .keep_all = T) %>% 
    summarize(total_spend_formatted = sum(total_spend_formatted),
              total_num_ads = sum(total_num_ads))

add_ribbons <- function(x, adv, col) {
   x %>% 
  # tab_options(table.width = pct(100)) %>%
  tab_style(
    style = cell_borders(
      sides = c("left"),
      color = col,
      weight = px(18.5),
      style = "solid"
    ),
    locations = cells_body(
      columns = `Number of Advertisers`,
      rows = adv
    ))
}

add_ribbons2 <- function(x, adv, col) {
   x %>% 
  # tab_options(table.width = pct(100)) %>%
  tab_style(
    style = cell_borders(
      sides = c("left"),
      color = col,
      weight = px(18.5),
      style = "solid"
    ),
    locations = cells_body(
      columns = `Number of Ads`,
      rows = adv
    ))
}
```


### Daily Spend



```{r, out.width="100%"}
# more_data %>% 
#   mutate(under100 = spend == 50)  %>% 
#     left_join(nl_advertisers %>% rename(advertiser_id = page_id) %>% 
#                   select(advertiser_id, party))  %>% 
#   filter(under100) %>% 
#   filter(party == "VVD")

  # filter(under100) %>% 
  #   drop_na(party) %>%
  #   group_by(party) %>% 
  #   summarize(spend  = sum(spend)) %>% 
  #   ungroup()
  # 
  # 
  # group_by(party) %>% 
  # add_count(under100) %>% 
  # ungroup() %>% 
  # filter()
  # 
  # count(under100)

# nl_advertisers %>% 
#     filter(party == "SP")

# nlsb %>% 
#     janitor::clean_names() %>% 
#     bind_rows(more_data) %>% 
#     left_join(nl_advertisers %>% rename(advertiser_id = page_id) %>% 
#                   select(advertiser_id, party)) %>% 
#     drop_na(party) %>%
#     group_by(date_produced, party) %>% 
#     summarize(spend  = sum(spend)) %>% 
#     ungroup() %>% 
#     # group_by(party) %>% 
#     # arrange(date_produced) %>% 
#     # mutate(spend = cumsum(spend)) %>% 
#     # filter(party == "SP")
#     ggplot(aes(date_produced, spend, color = party)) +
#     geom_line(size = 1.5) +
#     scale_color_parties() +
#     facet_wrap(~party, ncol = 3) +
#     ggthemes::theme_hc() +
#     theme(legend.position = "none") +
#     labs(y = "Daily Spend in Euro", x = "Day")

# plotly::ggplotly(ht)

# library(highcharter)

# nlsb %>% 
#     janitor::clean_names() %>% 
#     bind_rows(more_data) %>% 
#     left_join(nl_advertisers %>% rename(advertiser_id = page_id) %>% 
#                   select(advertiser_id, party)) %>% 
#     drop_na(party) %>%
#     group_by(date_produced, party) %>% 
#     summarize(spend  = sum(spend)) %>% 
#     ungroup() %>% 
#   filter(date_produced >= as.Date("2023-03-08"))  %>% 
#   clipr::write_clip()
#   hchart('area', hcaes(x = 'date_produced', y = 'spend', group = "party"))

## start here

more_data <- dir("../data/reports", full.names = T) %>%
  
    map_dfr(~{#print(.x)
        yo <- read.csv(.x) %>% mutate(path = .x)
        return(yo)
            }) %>%
    mutate(date_produced = str_remove_all(path, "../data/reports/FacebookAdLibraryReport_|_ME_yesterday_advertiser\\.csv")) %>%
    mutate(date_produced = lubridate::ymd(date_produced)) %>%
  drop_na(date_produced) %>% 
    janitor::clean_names()%>% #rename(advertiser_id = page_id) %>%
    mutate(spend = readr::parse_number(amount_spent_eur)) %>%
    mutate(spend = ifelse(spend == 100, 1, spend)) %>%
    # distinct(page_id, .keep_all = T) %>%
    filter(str_detect(page_name, "Global Space Conference on Climate Change|de Alliantie|PvdA - GroenLinks", negate = T)) %>%
    mutate(page_id = as.character(page_id))

# me_advertisers <- read_csv("../data/wtm-advertisers-gr-2023-05-20T08_49_00.571Z.csv")
hc_data <-  more_data %>%
  # mutate(advertiser_id = as.character(advertiser_id)) %>%
    left_join(election_dat30 %>%
                distinct(internal_id, party) %>% 
                  select(page_id = internal_id, party)) %>%
    drop_na(party) %>%
    group_by(date_produced, party) %>%
    summarize(spend  = sum(spend)) %>%
    ungroup() %>%
  # spread(key = party, value = spend, fill = 0) %>%
  # arrange(date_produced) %>%
  # mutate(across(starts_with("50PLUS"):(last_col()), ~cumsum(.), .names = "cumulative_{.col}")) %>%
  # select(date_produced, starts_with("cumulative")) %>%
  # rename_with(~str_remove(., "cumulative_"), starts_with("cumulative")) %>%
  # pivot_longer(-date_produced, names_to = "party", values_to = "spend")  %>%
  group_by(party) %>%
  mutate(total_spend = max(spend)) %>%
  ungroup()  %>%
  left_join(color_dat, by = "party") %>%
  mutate(party = as.factor(party)) %>%
  mutate(party = fct_reorder(party, total_spend))

saveRDS(hc_data, "../data/hc_data.rds")

color_order <- hc_data %>%
  distinct(party, .keep_all = T) %>%
  arrange(party) %>%
  pull(colors)


hc_data %>%
  mutate(`Daily Spend` = spend) %>%
  mutate(Date = date_produced) %>%
  hchart("area", hcaes(x = Date, y = `Daily Spend`, group = party, fill = colors)) %>%
  hc_plotOptions(    area = list(
      stacking = "normal",
      lineWidth = 1,
      marker = list(enabled = FALSE)
    )) %>%
  # hc_legend(share = TRUE)%>%
  hc_colors(color_order)%>%
  hc_tooltip(
    shared = TRUE,
    positioner = JS("function (labelWidth, labelHeight, point) {
        return { x: 200, y: this.chart.plotTop };
    }")
  )
# hc_colors(levels(hc_data$party))
# hc_colors(color_dat$colors[as.character(unique(hc_data$party))])

# color_dat$colors[levels(hc_data$party)]

# more_data %>% 
#   count(date_produced)

```



### `r last30days_string` (Last 30 days)


In total, political parties spend `r paste0(currency_symbol, scales::comma_format()(sum30$total_spend_formatted))` and ran `r sum30$total_num_ads` ad copies on Meta in this timeframe.


```{r}

get_table_dat <- function(x, var) {
    

x %>% 
    filter(main_currency == the_currency) %>% 
        distinct(internal_id, .keep_all = T) %>% 
    group_by({{ var }}) %>% 
    summarize(total_num_ads = n()) %>% 
    drop_na() %>% 
    mutate(total_num_ads = scales::comma(total_num_ads)) %>%
    pivot_wider(names_from = {{ var }}, values_from = total_num_ads) %>% 
    mutate(`party_col` = "Number of Advertisers") %>% 
    bind_rows(x %>% 
    filter(main_currency == the_currency) %>% 
        distinct(internal_id, .keep_all = T) %>% 
        group_by({{ var }}) %>% 
        arrange(desc(total_spend_formatted)) %>% 
        slice(1:3) %>% 
        mutate(total_spend_formatted = scales::comma(total_spend_formatted)) %>%
        mutate(n_words = str_count(page_name, " ")) %>% 
        mutate(lab = paste0(page_name, " (",currency_symbol, total_spend_formatted, ")")) %>%
        select({{ var }}, lab) %>% 
        drop_na() %>% 
        summarize(lab = paste0("<br>", 1:n(), ". ", lab, collapse = "")) %>% 
        pivot_wider(names_from = {{ var }}, values_from = lab) %>% 
        mutate(`party_col` = "Top Spenders"))  %>% 
    bind_rows(
        x %>% 
            distinct(internal_id, .keep_all = T) %>% 
            group_by({{ var }}) %>% 
            summarize(total_num_ads = sum(total_num_ads)) %>% 
            drop_na() %>% 
            mutate(total_num_ads = scales::comma(total_num_ads)) %>% 
            pivot_wider(names_from = {{ var }}, values_from = total_num_ads) %>% 
            mutate(`party_col` = "Number of Ads")) %>% 
    bind_rows(
        x %>% 
            distinct(internal_id, .keep_all = T) %>% 
            group_by({{ var }}) %>% 
            summarize(total_spend_formatted = sum(total_spend_formatted)) %>% 
            mutate(total_spend_formatted = scales::comma(total_spend_formatted)) %>% 
        mutate(total_spend_formatted = paste0(currency_symbol, total_spend_formatted)) %>% 
            drop_na() %>% 
            pivot_wider(names_from = {{ var }}, values_from = total_spend_formatted) %>% 
            mutate(`party_col` = "Total Spend") ) %>% 
    t() %>% 
    as.data.frame() %>% 
    rownames_to_column("party_col") %>% 
    set_names(.[nrow(.),] %>% as.character()) %>% 
    slice(1:(n()-1)) 
    
}

# debugonce(get_table_dat)
get_table_dat(election_dat30, party) %>% 
  arrange(desc(parse_number(`Total Spend`))) %>% 
  gt(
    rowname_col = "party_col"
    # groupname_col = "group"
  ) %>% 
  fmt_markdown(columns = everything())  %>% 
  cols_align(
    align = "center"
  ) %>% 
  gtExtras::gt_theme_538()  %>%
add_ribbons("Drugo", "#e6194B") %>%
add_ribbons("DCG", "#f5911d") %>%
add_ribbons("DF", "#00008b") %>%
add_ribbons("URA", "green") %>%
add_ribbons("DPS", "#524fa1") %>%
add_ribbons("SDP", "#ff1a1a") %>%
add_ribbons("ES!", "#f1c851") %>%
add_ribbons("SD", "#f04949") %>%
add_ribbons("SNP", "#6495ed") %>%
# add_ribbons("UCG", "#2598d4")# %>%
# add_ribbons("Vlada Crne Gore", "#89cff0") #%>%
add_ribbons("Demos", "#89cff0") %>%
add_ribbons("HGI", "#9A6324") %>%
add_ribbons("LP", "#fffac8") %>%
add_ribbons("Prava Crna Gora", "#800000")


# election_dat30 %>% count(party, sort = T)
```




### `r last7days_string` (Last 7 days)

In total, political parties spend `r paste0(currency_symbol,scales::comma_format()(sum7$total_spend_formatted))` and ran `r sum7$total_num_ads` ad copies on Meta in this timeframe.



```{r}

get_table_dat(election_dat7, party) %>% 
  arrange(desc(parse_number(`Total Spend`))) %>% 
  gt(
    rowname_col = "party_col"
    # groupname_col = "group"
  ) %>% 
  fmt_markdown(columns = everything())  %>% 
  cols_align(
    align = "center"
  ) %>% 
  gtExtras::gt_theme_538() %>% 
  tab_options(table.width = pct(100))  %>%
add_ribbons("Drugo", "#e6194B") %>%
add_ribbons("DCG", "#f5911d") %>%
add_ribbons("DF", "#00008b") %>%
add_ribbons("URA", "green") %>%
add_ribbons("DPS", "#524fa1") %>%
add_ribbons("SDP", "#ff1a1a") %>%
add_ribbons("ES!", "#f1c851") %>%
add_ribbons("SD", "#f04949") %>%
add_ribbons("SNP", "#6495ed") %>%
# add_ribbons("UCG", "#2598d4")# %>%
# add_ribbons("Vlada Crne Gore", "#89cff0") #%>%
add_ribbons("Demos", "#89cff0") %>%
add_ribbons("HGI", "#9A6324") %>%
add_ribbons("LP", "#fffac8") %>%
add_ribbons("Prava Crna Gora", "#800000")

```

::: 

